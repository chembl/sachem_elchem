diff --git a/base/core/src/main/java/org/openscience/cdk/atomtype/CDKAtomTypeMatcher.java b/base/core/src/main/java/org/openscience/cdk/atomtype/CDKAtomTypeMatcher.java
index b08e73d76f..d224dab775 100755
--- a/base/core/src/main/java/org/openscience/cdk/atomtype/CDKAtomTypeMatcher.java
+++ b/base/core/src/main/java/org/openscience/cdk/atomtype/CDKAtomTypeMatcher.java
@@ -494,7 +494,7 @@ public class CDKAtomTypeMatcher implements IAtomTypeMatcher {
     private Order getMaximumBondOrder(List<IBond> connectedBonds) {
     	IBond.Order max = IBond.Order.SINGLE;
     	for (IBond bond : connectedBonds) {
-            if (bond.getOrder().numeric() > max.numeric())
+            if (bond.getOrder() != null && bond.getOrder().numeric() > max.numeric())
             	max = bond.getOrder();
         }
         return max;
diff --git a/base/standard/src/main/java/org/openscience/cdk/graph/invariant/Canon.java b/base/standard/src/main/java/org/openscience/cdk/graph/invariant/Canon.java
index 07f8ee2137..ff52e3cdce 100644
--- a/base/standard/src/main/java/org/openscience/cdk/graph/invariant/Canon.java
+++ b/base/standard/src/main/java/org/openscience/cdk/graph/invariant/Canon.java
@@ -341,6 +341,7 @@ public final class Canon {
             int expH = 0;
             int elem = atomicNumber(atom);
             int chg = charge(atom);
+            int mass = atom.getMassNumber() != null ? atom.getMassNumber() : 0;
 
             // count non-suppressed (explicit) hydrogens
             for (int w : graph[v])
@@ -358,6 +359,8 @@ public final class Canon {
             label |= Math.abs(chg) & 0x3;
             label <<= 4; // hydrogen count <= 15 (4 bits)
             label |= impH + expH & 0xf;
+            label <<= 10;
+            label |= mass;
 
             labels[v] = label;
         }
diff --git a/base/standard/src/main/java/org/openscience/cdk/stereo/StereoElementFactory.java b/base/standard/src/main/java/org/openscience/cdk/stereo/StereoElementFactory.java
index 09c723bed9..9d19ddb706 100644
--- a/base/standard/src/main/java/org/openscience/cdk/stereo/StereoElementFactory.java
+++ b/base/standard/src/main/java/org/openscience/cdk/stereo/StereoElementFactory.java
@@ -46,6 +46,7 @@ import java.util.Set;
 import static org.openscience.cdk.graph.GraphUtil.EdgeToBondMap;
 import static org.openscience.cdk.interfaces.IBond.Stereo.DOWN;
 import static org.openscience.cdk.interfaces.IBond.Stereo.DOWN_INVERTED;
+import static org.openscience.cdk.interfaces.IBond.Stereo.E_OR_Z;
 import static org.openscience.cdk.interfaces.IDoubleBondStereochemistry.Conformation;
 import static org.openscience.cdk.interfaces.ITetrahedralChirality.Stereo;
 
@@ -285,7 +286,7 @@ public abstract class StereoElementFactory {
                         IBond bond = bondMap.get(v, w);
                         if (w > v && bond.getOrder() == IBond.Order.DOUBLE) {
                             if (centers.elementType(w) == Stereocenters.Type.Tricoordinate
-                                && centers.isStereocenter(w) && !isInSmallRing(bond, 7)) {
+                                && centers.isStereocenter(w) /*&& !isInSmallRing(bond, 7)*/) {
                                 IStereoElement element = createGeometric(v, w, centers);
                                 if (element != null) elements.add(element);
                             }
@@ -773,6 +774,9 @@ public abstract class StereoElementFactory {
 
             if (hasUnspecifiedParity(focus)) return null;
 
+            if(container.getConnectedBondsCount(focus) != 2)
+                return null;
+
             IAtom[] terminals = ExtendedTetrahedral.findTerminalAtoms(container, focus);
 
             int t0 = container.indexOf(terminals[0]);
@@ -795,6 +799,7 @@ public abstract class StereoElementFactory {
                 if (w == v) continue;
                 if (bond.getOrder() != IBond.Order.SINGLE) continue;
                 if (isUnspecified(bond)) return null;
+                if (n == 2) return null;
                 neighbors[n] = container.getAtom(w);
                 elevation[n] = elevationOf(terminals[0], bond);
                 n++;
@@ -806,6 +811,7 @@ public abstract class StereoElementFactory {
                 IBond bond = bondMap.get(t1, w);
                 if (bond.getOrder() != IBond.Order.SINGLE) continue;
                 if (isUnspecified(bond)) return null;
+                if (n == 4) return null;
                 neighbors[n] = container.getAtom(w);
                 elevation[n] = elevationOf(terminals[1], bond);
                 n++;
@@ -831,6 +837,10 @@ public abstract class StereoElementFactory {
             if ((dbs.size() & 0x1) == 0)
                 return null;
 
+            for(IBond bond : dbs)
+                if(bond.getStereo() == E_OR_Z)
+                    return null;
+
             IBond   focus    = dbs.get(dbs.size()/2);
             IBond[] carriers = new IBond[2];
             int     config   = 0;
diff --git a/base/standard/src/main/java/org/openscience/cdk/stereo/Stereocenters.java b/base/standard/src/main/java/org/openscience/cdk/stereo/Stereocenters.java
index 06a6113e57..237b49d48f 100644
--- a/base/standard/src/main/java/org/openscience/cdk/stereo/Stereocenters.java
+++ b/base/standard/src/main/java/org/openscience/cdk/stereo/Stereocenters.java
@@ -702,7 +702,7 @@ public final class Stereocenters {
         if (getRingDegree(container.indexOf(beg)) < 3 &&
             getRingDegree(container.indexOf(end)) < 3)
             return false;
-        boolean[] avisit = new boolean[container.getBondCount()];
+        boolean[] avisit = new boolean[container.getAtomCount()];
         avisit[container.indexOf(beg)] = true;
         avisit[container.indexOf(end)] = true;
         int count = 0;
diff --git a/storage/ctab/src/main/java/org/openscience/cdk/io/MDLV2000Reader.java b/storage/ctab/src/main/java/org/openscience/cdk/io/MDLV2000Reader.java
index 6a3202d4e1..859e445c13 100644
--- a/storage/ctab/src/main/java/org/openscience/cdk/io/MDLV2000Reader.java
+++ b/storage/ctab/src/main/java/org/openscience/cdk/io/MDLV2000Reader.java
@@ -687,6 +687,7 @@ public class MDLV2000Reader extends DefaultChemObjectReader {
             case 45: // hhh: hydrogen count + 1 [query]
             case 42: // sss: stereo parity
                 parity = toInt(line.charAt(41));
+            case 40:
             case 39: // ccc: charge
                 charge = toCharge(line.charAt(38));
             case 36: // dd: mass difference
